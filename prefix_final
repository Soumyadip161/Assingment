#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct stack{
    char data;
    struct stack *next;
}stack;
stack *top=NULL;
int max=100;
int size=0;
void push(char n)
{
    stack *new_node=(stack *)malloc(sizeof(stack));
    if(size<max){
    new_node->data=n;
    if(top == NULL)
    {
       top=new_node;
       new_node->next=NULL;
    }
    else{
        new_node->next=top;
        top=new_node;
    }
    size++;
    }
    else{
        printf("Stack Overflow\n");
    }
}
char pop()
{
    stack *hr;
    int d;
    if (size>0)
    {
         hr=top;
    d=top->data;
    top=top->next;
    free(hr);
    size--;
    if(size==0){
        top==NULL;
    }
    

    }
    else 
    {
        
        printf("Stack UnderFlow\n");
        return '\0';
    }
    return d;
}
int getprecedence(char ch)
{
    int pre;
    switch(ch)
    {
        case '^': pre=5;
                  break;
        case '*': 
        case '/': pre=4;
                 break;
        case '+':
        case '-': pre=3;
                 break;
        
    }
    return pre;
}
void reverse(char *src)
{
 int i,l;
 char tmp;
 l=strlen(src);
 for(i=0;i<l/2;i++)
 {
    tmp=src[i];
    src[i]=src[l-i-1];
    src[l-i-1]=tmp;
 }
}
int main()
{
    char str[25];
    char str_new[25];
    char *ch;
    int l,n=0;
    printf("Enter the string which in no case be greater than 25\n");
    scanf("%s",str);
    reverse(str);
    printf("%s\n",str);
    ch=str;
    while(*ch!='\0')
    {
       if(*ch=='^'||*ch=='*'||*ch=='/'||*ch=='+'||*ch=='-')
       {
        if(top==NULL)
        {
            push(*ch);
        }
        else{
        if(getprecedence(*ch)>=getprecedence(top->data))
        {
            push(*ch);
        }
        else{
               
            while(top!=NULL &&getprecedence(*ch)<getprecedence(top->data)){
              str_new[n]=pop();
            n++;
            }
            push(*ch);
        }
        }
       }
       else if(((int)*ch>64&&(int)*ch<91)||((int)*ch>96&&(int)*ch<123))
       {
        str_new[n]=*ch;
        n++;
       }
       ch++;
       
    }
    while(size>0)
    {
        str_new[n]=pop();
        n++;
    }
    str_new[n]='\0';
    printf("%s\n",str_new);
    reverse(str_new);

    printf("%s\n",str_new);
    printf("\n");
   return 0;
}
