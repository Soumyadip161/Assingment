#include <stdio.h>
#include <stdlib.h>
typedef struct node{
    int data;
    struct node* link;
}node;
void insert_at_pos(struct node** href,int pos,int n)
{
    int count=1;
    node* new_node = (node*)malloc(sizeof(node));
    node* hr=*href;
    while(hr->link!=NULL&&count<pos-1)
    {
        hr=hr->link;
        count++;
    }
    new_node->data=n;
    new_node->link=hr->link;
    hr->link=new_node;
}
void insert(struct node** href,int n)
{
    
    node* new_node = (node*)malloc(sizeof(node));
    new_node->data=n;
    new_node->link=NULL;
    if (*href==NULL)
    {
        *href=new_node;
    }
    else{
    node* hr=*href;

    while(hr->link!=NULL)
    {
        hr=hr->link;
        
    }
   
    hr->link=new_node;
}
}
int getSize(node* head){
    int size=1;
    node *hr=head;
    while (hr->link!=NULL)
    {
        size++;
        hr=hr->link;
    }
    return size;
}
void insert_at_begining(node** href,int n)
{
    node* new_node=(node*)malloc(sizeof(node));
    new_node->data=n;
    if(*href==NULL)
    {
        *href=new_node;
        new_node->link=NULL;
    }
    else{
        new_node->link=*href;
        *href=new_node;
    }

}

void display( node* href)
{
     node* hr=href;

    while(hr!=NULL)
    {
        
        printf("%d\t",hr->data);
        hr=hr->link;
    }
}
void Bubble_sort(node ** href)
{
    int size,i,j;
   size=getSize(*href);
    for(i=1;i<=size-1;i++)
    {
        node* tmp,*tmp1;
        tmp=*href;
        tmp1=(*href)->link;
        for(j=1;j<=size-1;j++)
        {
            if(tmp->data>tmp1->data)
            {
                int temp=tmp->data;
                tmp->data=tmp1->data;
                tmp1->data=temp;
            }
            tmp=tmp->link;
            tmp1=tmp1->link;
        }
    }

}
void reverse_list(node ** href)
{
    int size,i,j;
   size=getSize(*href);
    for(i=0;i<=size-1;i++)
    {
        node* tmp,*tmp1;
        tmp=*href;
        tmp1=(*href)->link;
        for(j=1;j<=size-1-i;j++)
        {
           
                int temp=tmp->data;
                tmp->data=tmp1->data;
                tmp1->data=temp;
            
            tmp=tmp->link;
            tmp1=tmp1->link;
        }
    }

}
int main()
{
    node* head;
    head=NULL;
    int ch,d,pos;
    while(1)
    {
        printf("\npress\n");
        printf("1--------> to enter an element at end\n");
        printf("2--------> to enter an element at begining\n");
        printf("3--------> to enter an element at position\n");
       
        printf("4--------> to bubble sort the existing linked list\n");
        printf("5---------> to reverse the linked list\n");
        printf("6---------> to exit from menu\n");
        scanf("%d",&ch);
        
       switch(ch)
       {
          case 1:printf("Enter the element to insert at end\n");
                 scanf("%d",&d);
                 insert(&head,d);
                 display(head);
                 break;
          case 2:printf("Enter the element to insert\n");
                 scanf("%d",&d);
                 insert_at_begining(&head,d);
                 display(head);
                 break;
          case 3:printf("Position:");
                 scanf("%d",&pos);
                 printf("Enter element:");
                 scanf("%d",&d);
                
                 
                 if(pos==1||head==NULL)
                 {
                    insert_at_begining(&head,d);
                 }
                 else{
                 insert_at_pos(&head,pos,d);}
                 display(head);
                 break;
       
        case 4:Bubble_sort(&head);
               display(head);
               break;
          case 5:printf("Reversing the linked list\n");
                 reverse_list(&head);
                 display(head);
                 break;
          case 6:printf("Thanks for using:)");
                 exit(1);
          default:printf("Wrong input enter again");
        }
    }
    return 0;
}
