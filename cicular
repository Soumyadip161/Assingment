#include <stdio.h>
#include <stdlib.h>

typedef struct Node
{
    int data;
    struct Node *next;
} node;
void insert_at_end(node **head, int n)
{
    node *new_node = (node *)malloc(sizeof(node));
    new_node->data = n;
    node *hr = *head;
    if (*head == NULL)
    {
        *head = new_node;
        (*head)->next = *head;
    }
    else
    {
        while (hr->next != *head)
        {
            hr = hr->next;
        }
        new_node->next = hr->next;
        hr->next = new_node;
    }
}
void insert_at_begining(node **head,int n)
{
    node *new_node = (node *)malloc(sizeof(node));
    new_node->data = n;
    node *hr = *head;
    if (*head == NULL)
    {
        *head = new_node;
        (*head)->next = *head;
    }
    else
    {
        while (hr->next != *head)
        {
            hr = hr->next;
        }
        new_node->next = hr->next;
        hr->next = new_node;
        *head=new_node;
    }
}
void display(node *head)
{
    node *hr;
    hr = head;
    
    do{
        printf("%d\t", hr->data);
        hr = hr->next;
    }while(hr!=head);
     printf("\n");
}
void check_circular(node *head)
{
   node* hr=head;
    while (hr->next!=head)
    {
         hr=hr->next;
    }
   printf("Address of head=%d",head);
    printf("Next of last:%d data at next of last:%d\n",hr->next,hr->next->data);
}
insert_at_pos(node ** head,int n,int pos)
{
    
    if(pos==1||*head==NULL)
    {
        insert_at_begining(head, n);
    }
    else{
        int count = 1;
        node *hr=*head;
        while(hr->next!=*head &&count<pos-1)
        {
            hr=hr->next;
            count ++;
        }
        if(hr->next==*head)
        {
            insert_at_end(head, n);
        }
        else{
            node *new_node=(node *)malloc(sizeof(node));
            new_node->data=n;
            new_node->next=hr->next;
            hr->next=new_node;
        }
    }
}
void delete_begining(node **head)
{
    if(*head!=NULL){
    node *hr=*head;
    while (hr->next!=*head)
    {
        hr=hr->next;
    }
    node* temp=hr->next;
    hr->next=hr->next->next;
    *head=hr->next;
    free(temp);
    }
}
void delete_end(node **head)
{
    if(*head!=NULL){
    node *hr=*head;
    while (hr->next->next!=*head)
    {
        hr=hr->next;
    }
    node* temp=hr->next;
    hr->next=hr->next->next;
    
    free(temp);
    }
}
int main()
{
    node *head = NULL;
    insert_at_end(&head, 50);
    display(head);
    insert_at_end(&head, 800);
    display(head);
    insert_at_end(&head, 90);
    display(head);
    insert_at_begining(&head,69);
    display(head);
check_circular(head);

delete_begining(&head);
display(head);
delete_end(&head);
display(head);
check_circular(head);
    // traversal(head);

    return 0;
}
